THE ELEMENTS OF A GOOD API
AUTHOR: TREVOR JAMES NANGOSHA

--------------DESIGNING GOOD APIs-----------------------------------------------
In this article, i am going to be writing about designing the best APIs. most of the concepts will apply to
RESTFUL APIs but most of them can also apply to other APIs as well.

REST - Representational State Transfer.

any creator of a good API should know that a good API is good at abstraction.
the users of the API only want to know how to interact with the API, and not how the API works.
following the naming convention in Clean Code(this book is a must read), API functions should be named well, and they should have no side effects.

in this case,  assume we are not dealing with non-RESTFUL APIs and there is an API called 
getAdmins(String groupID)to return the admins of a group with the groupID in the parameters.
this API should only return the admins of the given group and should not have any other side effects like deleting users.

deleting users is a side effect and good APIs do not have side effects. this could probably mean
that the API was named wrongly.

---------------QUERY STRINGS AND QUERY PARAMETERS--------------------
get requests, unlike post requests do not have a body object so when working with the get requests, the way to collect data from the user is by using query strings and query parameters

QUERY PARAMETERS
query parameters are in the form let's say: nangosha/users/:userID
that userID string in the URL is what we call the query string
it can be accessed in nodeJS using the req.params.userID command

QUERY STRINGS
just like query parameters, query strings are also used for collecting data from requests
i am sure you hae seen them in Google searches.  this is the part that comes after the question mark.
a URL can have multiple query strings each  separated by an ampersand sign.

for example: nangosha/search?user="nangosha"&tribe="mugishu"

--------FORMAT FOR SENDING DATA-----------------
when designing APIs, you should use JSON as the defacto standard for sending and receiving data
this is because it is easier to decode and encode and also supported by many frameworks and developers.

---------NOUNS vs VERBS--------------------------
the best APIs do not have verbs in their endpoints. the verbs are already described in the HTTP method
this is a bad API: POST /createPosts
this is a better API: POST /posts

you should let the HTTP verbs handle what the endpoints do.


---------------NAMING COLLECTIONS----------------------------
if you have an endpoint like DELETE /post/123, it is not good since it does not say that there could be other posts
in the same collection
an endpoint like DELETE /posts/123 i better since it tells the consumers that there could be other resources in the
same collection

---------------USING STATUS CODES IN ERROR HANDLING-------------
always use HTTP error codes to tell the consumers of the API when something goes wrong, success or even a failure

------------USING NESTING AND PAGINATION---------------------------
sometimes an API's database can get really large, and if this happens then retrieving data can get really slow.
you can use filtering, sorting and pagination on the collections.
for example say you have a database of tags, an example of a filtered endpoint is: 
GET /posts?tag="javascript"

-----------------------USE SSL FOR SECURITY----------------------------

-----------------BE CLEAR WITH THE VERSIONING OF YOUR API-------------------------
REST APIs must have different versions, so you don't force your consumers to migrate to newer versions.
we normally use the semantic system of versioning.
it takes the form of x.y.z
x- major version
y- minor version
z- patch versioning

look at the API of Spotify
GET /v1/artists/:artistID/albums
notice the version number

-------------PROVIDE API DOCUMENTATION---------------------
